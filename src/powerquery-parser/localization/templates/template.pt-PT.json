{
  "error_common_cancellationError": "CancellationError: {reason}",
  "error_common_invariantError_1_details": "InvariantError: {invariantBroken} - {details}",
  "error_common_invariantError_2_noDetails": "InvariantError: {invariantBroken}",
  "error_common_unknown": "Foi encontrado um erro desconhecido, innerError: {innerError}",
  "error_lex_badLineNumber_1_greaterThanNumLines": "lineNumber é maior ou igual ao número de linhas",
  "error_lex_badLineNumber_2_lessThanZero": "lineNumber é menor ou igual a 0",
  "error_lex_badRange_1_lineNumberEnd_greaterThanLineLength": "end.lineCodeUnit é superior ao comprimento da linha",
  "error_lex_badRange_2_lineNumberEnd_greaterThanLineNumbers": "end.lineNumber é superior ao número de linhas do Estado",
  "error_lex_badRange_3_lineNumberStart_greaterThanLineLength": "start.lineCodeUnit é maior do que o comprimento da linha",
  "error_lex_badRange_4_lineNumberStart_greaterThanLineNumberEnd": "start.lineNumber é maior do que end.lineNumber",
  "error_lex_badRange_5_lineNumberStart_greaterThanNumLines": "start.lineNumber é maior do que o número de linhas do Estado",
  "error_lex_badRange_6_lineNumberStart_lessThanZero": "start.lineNumber é menor do que 0",
  "error_lex_badRange_7_sameLine_codeUnitStartGreaterThanCodeUnitEnd": "O início e o fim partilharam a mesma linha, mas start.lineCodeUnit era maior do que end.lineCodeUnit",
  "error_lex_badState": "O lexer encontrou um erro na última execução. Forneça mais texto ao lexer ou reveja o erro anterior.",
  "error_lex_endOfStream": "O lexer atingiu o fim de fluxo",
  "error_lex_endOfStreamPartwayRead": "Ao tentar ler um token, a transmissão em fluxo do documento terminou a meio",
  "error_lex_expectedKind_1_hex": "Era esperado um literal hex",
  "error_lex_expectedKind_2_keywordOrIdentifier": "Era esperado um identificador ou uma palavra-chave",
  "error_lex_expectedKind_3_numeric": "Era esperado um literal numérico",
  "error_lex_lineMap": "Erro nas linhas: {lineNumbers}",
  "error_lex_unexpectedRead": "Leitura inesperada durante a atomização",
  "error_lex_unterminatedMultilineToken_1_comment": "Comentário multiline não terminado",
  "error_lex_unterminatedMultilineToken_2_quotedIdentifier": "Identificador delimitado por aspas não terminado",
  "error_lex_unterminatedMultilineToken_3_string": "Cadeia não terminada",
  "error_parse_csvContinuation_1_danglingComma": "Deixou uma vírgula final?",
  "error_parse_csvContinuation_2_letExpression": "Uma vírgula não pode estar depois de um 'in'",
  "error_parse_expectAnyTokenKind_1_other": "Era esperado encontrar um dos seguintes, mas, em vez disso, foi encontrado um {foundTokenKind}: {expectedAnyTokenKinds}",
  "error_parse_expectAnyTokenKind_2_endOfStream": "Era esperado encontrar um dos seguintes, mas, em vez disso, o fim de fluxo foi alcançado: {expectedAnyTokenKinds}",
  "error_parse_expectedCommaOrTokenKind": "Era esperado encontrar uma {localizedComma} ou {localizedAlternative}.",
  "error_parse_expectGeneralizedIdentifier_1_other": "Era esperado encontrar um identificador generalizado",
  "error_parse_expectGeneralizedIdentifier_2_endOfStream": "Era esperado encontrar um identificador generalizado, mas, em vez disso, o fim de fluxo foi alcançado primeiro",
  "error_parse_expectTokenKind_1_other": "Era esperado encontrar um {expectedTokenKind}, mas, em vez disso, foi encontrado um {foundTokenKind}",
  "error_parse_expectTokenKind_2_endOfStream": "Era esperado encontrar um {expectedTokenKind}, mas, em vez disso, foi alcançado o fim de fluxo",
  "error_parse_invalidCatchFunction": "A cláusula \"catch\" de uma expressão try/catch tem de ser seguida por uma definição de função com 0 ou 1 argumentos e sem restrições de tipo",
  "error_parse_invalidPrimitiveType": "Era esperado encontrar um literal primitivo, mas, em vez disso, foi encontrado um {foundTokenKind}",
  "error_parse_requiredParameterAfterOptional": "Não é possível ter um parâmetro não opcional após um parâmetro opcional",
  "error_parse_unterminated_sequence_bracket": "Parêntese reto não terminado",
  "error_parse_unterminated_sequence_parenthesis": "Parênteses não terminados",
  "error_parse_unusedTokens": "Análise concluída, mas mais tokens permanecem",
  "tokenKind_ampersand": "E comercial <'&'>",
  "tokenKind_asterisk": "asterisco <'*'>",
  "tokenKind_atSign": "arroba <'@'>",
  "tokenKind_bang": "ponto de exclamação <'!'>",
  "tokenKind_comma": "vírgula <','>",
  "tokenKind_division": "operador de divisão <'/'>",
  "tokenKind_dotDot": "ponto ponto <'..'>",
  "tokenKind_ellipsis": "reticências <'...'>",
  "tokenKind_equal": "operador de igualdade <'='>",
  "tokenKind_fatArrow": "vai para ('=>')",
  "tokenKind_greaterThan": "operador maior do que ('>')",
  "tokenKind_greaterThanEqualTo": "operador maior ou igual a ('>=')",
  "tokenKind_hexLiteral": "literal hex",
  "tokenKind_identifier": "identificador",
  "tokenKind_keywordAnd": "palavra-chave <'and'>",
  "tokenKind_keywordAs": "palavra-chave <'as'>",
  "tokenKind_keywordEach": "palavra-chave <'each'>",
  "tokenKind_keywordElse": "palavra-chave <'else'>",
  "tokenKind_keywordError": "palavra-chave <'error'>",
  "tokenKind_keywordFalse": "palavra-chave <'false'>",
  "tokenKind_keywordHashBinary": "palavra-chave <'#binary'>",
  "tokenKind_keywordHashDate": "palavra-chave <'#date'>",
  "tokenKind_keywordHashDateTime": "palavra-chave <'#datetime'>",
  "tokenKind_keywordHashDateTimeZone": "palavra-chave <'#datetimezone'>",
  "tokenKind_keywordHashDuration": "palavra-chave <'#duration'>",
  "tokenKind_keywordHashInfinity": "palavra-chave <'#infinity'>",
  "tokenKind_keywordHashNan": "palavra-chave <'#nan'>",
  "tokenKind_keywordHashSections": "palavra-chave <'#sections'>",
  "tokenKind_keywordHashShared": "palavra-chave <'#shared'>",
  "tokenKind_keywordHashTable": "palavra-chave <'#table'>",
  "tokenKind_keywordHashTime": "palavra-chave <'#time'>",
  "tokenKind_keywordIf": "palavra-chave <'if'>",
  "tokenKind_keywordIn": "palavra-chave <'in'>",
  "tokenKind_keywordIs": "palavra-chave <'is'>",
  "tokenKind_keywordLet": "palavra-chave <'let'>",
  "tokenKind_keywordMeta": "palavra-chave <'meta'>",
  "tokenKind_keywordNot": "palavra-chave <'not'>",
  "tokenKind_keywordOr": "palavra-chave <'or'>",
  "tokenKind_keywordOtherwise": "palavra-chave <'otherwise'>",
  "tokenKind_keywordSection": "palavra-chave <'section'>",
  "tokenKind_keywordShared": "palavra-chave <'shared'>",
  "tokenKind_keywordThen": "palavra-chave <'then'>",
  "tokenKind_keywordTrue": "palavra-chave <'true'>",
  "tokenKind_keywordTry": "palavra-chave <'try'>",
  "tokenKind_keywordType": "palavra-chave <'type'>",
  "tokenKind_leftBrace": "chaveta esquerda <'{'>",
  "tokenKind_leftBracket": "parênteses reto esquerdo <'['>",
  "tokenKind_leftParenthesis": "parênteses esquerdo <'('>",
  "tokenKind_lessThan": "operador menor do que ('<')",
  "tokenKind_lessThanEqualTo": "operador menor ou igual a ('<=')",
  "tokenKind_minus": "menos <'-'>",
  "tokenKind_notEqual": "operador diferente de ('<>')",
  "tokenKind_nullCoalescingOperator": "operador de união nulo <'??'>",
  "tokenKind_nullLiteral": "<'null'>",
  "tokenKind_numericLiteral": "literal numérico",
  "tokenKind_plus": "operador de adição <'+'>",
  "tokenKind_questionMark": "ponto de interrogação <'?'>",
  "tokenKind_rightBrace": "chaveta direita <'}'>",
  "tokenKind_rightBracket": "parênteses reto direito <']'>",
  "tokenKind_rightParenthesis": "parênteses direito <')'>",
  "tokenKind_semicolon": "ponto e vírgula <';'>",
  "tokenKind_textLiteral": "texto"
}